module TB_BPM_Monitor;

    // Testbench signals
    reg clk;
    reg reset;
    reg [7:0] pulse_count;  // Input pulse count
    wire [7:0] bpm;
    wire bpm_state;

    // Instantiate the BPM_Monitor module
    BPM_Monitor uut (
        .clk(clk),
        .reset(reset),
        .pulse_count(pulse_count), // Connect pulse_count
        .bpm(bpm),
        .bpm_state(bpm_state)
    );

    // Clock generation (50 MHz)
    always begin
        #10 clk = ~clk;  // Clock period = 20 time units
    end

    // Task to test the BPM monitor with random pulse counts
    task test_bpm_monitor;
        integer i;
        begin
            $display("\nBPM Monitor Test Cases");
            $display("+-------+--------------+--------+-----------+");
            $display("| Case  | Pulse Count  | BPM    | BPM State |");
            $display("+-------+--------------+--------+-----------+");

            // Loop over 35 test cases
            for (i = 1; i <= 35; i = i + 1) begin
                pulse_count = $urandom_range(5, 25);  // Random number of pulses between 5 and 25
                
                // Reset the system at the start of each test case
                reset = 1;
                #20 reset = 0;

                // Wait for clock edges to propagate
                #20;  // Wait for a clock cycle to process the pulse_count

                // Display the test results
                $display("| %3d   | %12d | %6d | %9b |", i, pulse_count, bpm, bpm_state);
            end

            $display("+-------+--------------+--------+-----------+");
        end
    endtask

    // Test sequence
    initial begin
        // Initialize signals
        clk = 0;
        reset = 0;
        pulse_count = 0;

        // Call the test task
        test_bpm_monitor();

        // End simulation
        $finish;
    end

endmodule
`timescale 1us/1ns

module fall_detection_system_tb;

    // Inputs
    reg clk;
    reg reset;
    reg fall_sensor;
    reg patient_reset;

    // Outputs
    wire alarm;

    // Testbench variables
    real fall_start_time;
    real fall_duration;
    real reset_time;
    
    // Monitor variable
    reg [31:0] monitor_time;

    // Instantiate the Unit Under Test (UUT)
    fall_detection_system uut (
        .clk(clk), 
        .reset(reset), 
        .fall_sensor(fall_sensor), 
        .patient_reset(patient_reset), 
        .alarm(alarm)
    );

    // Clock generation
    initial begin
        clk = 0;
        forever #0.5 clk = ~clk; // 1 MHz clock
    end

    // Monitor time update
    always @(posedge clk) begin
        monitor_time <= $realtime / 1000000;
    end

    // Test scenario
    initial begin
        // Initialize Inputs
        reset = 1;
        fall_sensor = 0;
        patient_reset = 0;
        fall_start_time = 0;
        fall_duration = 0;
        reset_time = 0;

        // Wait for global reset
        #10;
        reset = 0;

        // Test Case 1: No fall
        #1000000; // Wait 1 second

        // Test Case 2: Fall detected, but patient resets before alarm
        fall_sensor = 1;
        fall_start_time = $realtime/1000000.0;
        #10; // Wait for fall to be detected
        #5000000; // Wait 5 seconds
        fall_duration = ($realtime/1000000.0) - fall_start_time;
        patient_reset = 1;
        reset_time = ($realtime/1000000.0) - fall_start_time;
        #1;
        patient_reset = 0;
        #1;
        fall_sensor = 0;
        $display("Test Case 2: Fall duration = %0.2f seconds, Reset pressed after %0.2f seconds", fall_duration, reset_time);

        // Wait a bit
        #1000000;

        // Test Case 3: Fall detected, alarm triggered
        fall_sensor = 1;
        fall_start_time = $realtime/1000000.0;
        #10; // Wait for fall to be detected
        #31000000; // Wait 31 seconds
        fall_duration = ($realtime/1000000.0) - fall_start_time;
        $display("Test Case 3: Fall duration = %0.2f seconds, No reset pressed", fall_duration);

        // End simulation
        #1000000;
        $finish;
    end

    // Monitor
    initial begin
        $monitor("Time=%0d s: fall_sensor=%b, patient_reset=%b, alarm=%b", 
                 monitor_time, fall_sensor, patient_reset, alarm);
    end

endmodule
`timescale 1ns / 1ps

module TB_Combined;

    // Shared clock and reset signals
    reg clk;
    reg global_reset;

    // Instantiate all modules and their signals

    // BPM Monitor Testbench signals
    reg [7:0] pulse_count;  // Input pulse count
    wire [7:0] bpm;
    wire bpm_state;

    // Fall Detection Testbench signals
    reg fall_sensor;
    reg patient_reset;
    wire alarm;
    real fall_start_time;
    real fall_duration;
    real reset_time;
    reg [31:0] monitor_time_fall;

    // Medicine Reminder Testbench signals
    wire medicine_reminder;

    // Temperature Monitor Testbench signals
    reg [7:0] temperature;
    wire temp_high;
    wire temp_state;
    wire temp_low;

    // Instantiate all modules
    BPM_Monitor bpm_monitor_uut (
        .clk(clk),
        .reset(global_reset),
        .pulse_count(pulse_count),
        .bpm(bpm),
        .bpm_state(bpm_state)
    );

    fall_detection_system fall_detection_uut (
        .clk(clk),
        .reset(global_reset),
        .fall_sensor(fall_sensor),
        .patient_reset(patient_reset),
        .alarm(alarm)
    );

    Medicine_Reminder medicine_reminder_uut (
        .clk(clk),
        .reset(global_reset),
        .medicine_reminder(medicine_reminder)
    );

    Temperature_Monitor temperature_monitor_uut (
        .temperature(temperature),
        .temp_high(temp_high),
        .temp_state(temp_state),
        .temp_low(temp_low)
    );

    // Common clock generation for all modules (1 MHz clock => 1 Î¼s period)
    initial begin
        clk = 0;
        forever #500 clk = ~clk;  // Toggle every 500 ns for 1 MHz clock
    end

    // BPM Monitor Test Task
    task test_bpm_monitor;
        integer i;
        begin
            $display("\nBPM Monitor Test Cases");
            $display("+-------+--------------+--------+-----------+");
            $display("| Case  | Pulse Count  | BPM    | BPM State |");
            $display("+-------+--------------+--------+-----------+");

            // Loop over 35 test cases
            for (i = 1; i <= 35; i = i + 1) begin
                pulse_count = $urandom_range(5, 25);  // Random number of pulses between 5 and 25
                
                // Reset the system at the start of each test case
                global_reset = 1;
                #1000 global_reset = 0;  // Wait for reset to clear

                // Wait for clock cycles to propagate
                #1000;  // Wait for a clock cycle to process the pulse_count

                // Display the test results
                $display("| %3d   | %12d | %6d | %9b |", i, pulse_count, bpm, bpm_state);
            end

            $display("+-------+--------------+--------+-----------+");
        end
    endtask

    // Fall Detection Test Task
    task test_fall_detection;
        begin
            // Initialize Inputs
            fall_sensor = 0;
            patient_reset = 0;
            fall_start_time = 0;
            fall_duration = 0;
            reset_time = 0;

            // Wait for global reset
            #1000;

            // Test Case 1: No fall
            #1000000;  // Wait 1 second

            // Test Case 2: Fall detected, but patient resets before alarm
            fall_sensor = 1;
            fall_start_time = $realtime / 1000000.0;
            #10000;  // Wait for fall to be detected
            #5000000;  // Wait 5 seconds
            fall_duration = ($realtime / 1000000.0) - fall_start_time;
            patient_reset = 1;
            reset_time = ($realtime / 1000000.0) - fall_start_time;
            #1000;
            patient_reset = 0;
            #1000;
            fall_sensor = 0;
            $display("Test Case 2: Fall duration = %0.2f seconds, Reset pressed after %0.2f seconds", fall_duration, reset_time);

            // Test Case 3: Fall detected, alarm triggered
            fall_sensor = 1;
            fall_start_time = $realtime / 1000000.0;
            #10000;  // Wait for fall to be detected
            #31000000;  // Wait 31 seconds
            fall_duration = ($realtime / 1000000.0) - fall_start_time;
            $display("Test Case 3: Fall duration = %0.2f seconds, No reset pressed", fall_duration);

            #1000000;
        end
    endtask

    // Medicine Reminder Test Task
    task test_medicine_reminder;
        integer cycle_count;
        begin
            $display("\nMedicine Reminder Test Cases");
            $display("+-------+-------------------+-----------------+");
            $display("| Cycle | Time              | Medicine Reminder |");
            $display("+-------+-------------------+-----------------+");

            for (cycle_count = 0; cycle_count <= 2100; cycle_count = cycle_count + 1) begin
                @(posedge clk);  // Synchronize with positive clock edge
                #1;  // Small delay to allow for signal propagation
                $display("| %5d | %10d ns | %17b |", cycle_count, $time, medicine_reminder);
            end

            $display("+-------+-------------------+-----------------+");
        end
    endtask

    // Temperature Monitor Test Task
    task test_temperature_monitor;
        integer i;
        reg [7:0] temp_value;
        begin
            $display("\nTemperature Monitor Test Cases");
            $display("+-------+-------------+-----------+------------+-----------+");
            $display("| Case  | Temperature | Temp State | Temp Low  | Temp High |");
            $display("+-------+-------------+-----------+------------+-----------+");

            for (i = 1; i <= 40; i = i + 1) begin
                temp_value = $urandom_range(85, 110);
                temperature = temp_value;
                #1000;

                $display("| %3d   | %11d | %10b | %9b | %9b |", i, temp_value, temp_state, temp_high, temp_low);
            end

            $display("+-------+-------------+-----------+------------+-----------+");
        end
    endtask

    // Test sequence
    initial begin
        // Initialize signals
        global_reset = 1;
        pulse_count = 0;
        temperature = 0;

        // De-assert reset after a short delay
        #1000 global_reset = 0;

        // Run all tests sequentially
        test_bpm_monitor();
        test_fall_detection();
        test_medicine_reminder();
        test_temperature_monitor();

        // End simulation
        $finish;
    end

    // Monitor signals
    initial begin
        $monitor("Time=%0d ns: pulse_count=%d, bpm=%d, bpm_state=%b, fall_sensor=%b, alarm=%b, medicine_reminder=%b, temperature=%d, temp_state=%b",
                 $time, pulse_count, bpm, bpm_state, fall_sensor, alarm, medicine_reminder, temperature, temp_state);
    end

endmodule
`timescale 1ns / 1ps

module Medicine_Reminder_tb;

    reg clk;
    reg reset;
    wire medicine_reminder;

    // Instantiate the Medicine Reminder
    Medicine_Reminder uut (
        .clk(clk),
        .reset(reset),
        .medicine_reminder(medicine_reminder)
    );

    // Clock generation
    initial begin
        clk = 0;
        forever #5 clk = ~clk; // 100 MHz clock
    end

    // Test stimulus
    initial begin
        reset = 1;
        #10 reset = 0;
        test_medicine_reminder();
        $finish;
    end

    // Medicine Reminder test task
    task test_medicine_reminder;
        integer cycle_count;
        begin
            $display("\nMedicine Reminder Test Cases");
            $display("+-------+-------------------+-----------------+");
            $display("| Cycle | Time              | Medicine Reminder |");
            $display("+-------+-------------------+-----------------+");

            for (cycle_count = 0; cycle_count <= 2100; cycle_count = cycle_count + 1) begin
                @(posedge clk); // Synchronize with positive clock edge
                #1; // Small delay to allow for signal propagation
                $display("| %5d | %10d ns | %17b |", cycle_count, $time, medicine_reminder);
            end

            $display("+-------+-------------------+-----------------+");
        end
    endtask

    // Monitor outputs
    initial begin
        $monitor("Time: %0d ns | Medicine Reminder: %b", $time, medicine_reminder);
    end

endmodule
`timescale 1ns / 1ps

module Temperature_Monitor_tb;

    reg [7:0] temperature;
    wire temp_high;
    wire temp_state;
    wire temp_low;

    // Instantiate the Temperature Monitor
    Temperature_Monitor uut (
        .temperature(temperature),
        .temp_high(temp_high),
        .temp_state(temp_state),
        .temp_low(temp_low)
    );

    // Test task
    task test_temperature_monitor;
        integer i;
        reg [7:0] temp_value;
        begin
            $display("\nTemperature Monitor Test Cases");
            $display("+-------+-------------+-----------+------------+-----------+");
            $display("| Case  | Temperature | Temp State | Temp Low  | Temp High |");
            $display("+-------+-------------+-----------+------------+-----------+");

            for (i = 1; i <= 40; i = i + 1) begin
                temp_value = $urandom_range(85, 110);
                temperature = temp_value;
                #10;

                $display("| %3d   | %11d | %10b | %9b | %9b |", i, temp_value, temp_state, temp_high, temp_low);
            end

            $display("+-------+-------------+-----------+------------+-----------+");
        end
    endtask

    // Run the test
    initial begin
        test_temperature_monitor();
        $finish;
    end

endmodule


give combined test bench to one module for this somehow synchronize adjust the clock deay etc to make sure outputs are not altered
and out put should be same for diffrent modules diffrent tables give combined testbench
give 4 tables  remainder fall detection bpm and temperature 
in the output